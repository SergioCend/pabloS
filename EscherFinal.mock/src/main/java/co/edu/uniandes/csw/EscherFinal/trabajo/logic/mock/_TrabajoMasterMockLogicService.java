/* ========================================================================
 * Copyright 2014 EscherFinal
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 EscherFinal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.EscherFinal.trabajo.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.EscherFinal.trabajo.logic.dto.TrabajoDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.logic.api.ITrabajoLogicService;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.logic.api._ITrabajoMasterLogicService;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.logic.dto.TrabajoMasterDTO;
import co.edu.uniandes.csw.EscherFinal.video.logic.api.IVideoLogicService;
import co.edu.uniandes.csw.EscherFinal.imagen.logic.api.IImagenLogicService;
import co.edu.uniandes.csw.EscherFinal.autor.logic.api.IAutorLogicService;
import co.edu.uniandes.csw.EscherFinal.obra.logic.api.IObraLogicService;
import co.edu.uniandes.csw.EscherFinal.video.logic.dto.VideoDTO;
import co.edu.uniandes.csw.EscherFinal.imagen.logic.dto.ImagenDTO;
import co.edu.uniandes.csw.EscherFinal.autor.logic.dto.AutorDTO;
import co.edu.uniandes.csw.EscherFinal.obra.logic.dto.ObraDTO;
import javax.inject.Inject;


public abstract class _TrabajoMasterMockLogicService implements _ITrabajoMasterLogicService {

    protected static ArrayList<TrabajoMasterDTO> trabajoMasterDtosList = new ArrayList<TrabajoMasterDTO>() ;
    @Inject
    protected IVideoLogicService videoPersistance;
    @Inject
    protected IImagenLogicService imagenPersistance;
    @Inject
    protected IAutorLogicService autorPersistance;
    @Inject
    protected IObraLogicService obraPersistance;
    @Inject
    protected ITrabajoLogicService trabajoPersistance;

    public TrabajoMasterDTO createMasterTrabajo(TrabajoMasterDTO trabajo) {

        trabajoPersistance.createTrabajo(trabajo.getTrabajoEntity());
        for (ObraDTO dto : trabajo.getCreateobra()) {
            obraPersistance.createObra(dto);
        }
        for (AutorDTO dto : trabajo.getCreateautor()) {
            autorPersistance.createAutor(dto);
        }
        for (VideoDTO dto : trabajo.getCreatevideo()) {
            videoPersistance.createVideo(dto);
        }
        for (ImagenDTO dto : trabajo.getCreateimagen()) {
            imagenPersistance.createImagen(dto);
        }
        trabajoMasterDtosList.add(trabajo);
        return trabajo;
    }

    public TrabajoMasterDTO getMasterTrabajo(Long id) {
        for (TrabajoMasterDTO trabajoMasterDTO : trabajoMasterDtosList) {
            if (trabajoMasterDTO.getTrabajoEntity().getId() == id) {
                return trabajoMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterTrabajo(Long id) {
        for (TrabajoMasterDTO trabajoMasterDTO : trabajoMasterDtosList) {
            if (trabajoMasterDTO.getTrabajoEntity().getId() == id) {

                for (ObraDTO dto : trabajoMasterDTO.getCreateobra()) {
                    obraPersistance.deleteObra(dto.getId());
                }
                trabajoPersistance.deleteTrabajo(trabajoMasterDTO.getId());
                trabajoMasterDtosList.remove(trabajoMasterDTO);
                for (AutorDTO dto : trabajoMasterDTO.getCreateautor()) {
                    autorPersistance.deleteAutor(dto.getId());
                }
                trabajoPersistance.deleteTrabajo(trabajoMasterDTO.getId());
                trabajoMasterDtosList.remove(trabajoMasterDTO);
                for (VideoDTO dto : trabajoMasterDTO.getCreatevideo()) {
                    videoPersistance.deleteVideo(dto.getId());
                }
                trabajoPersistance.deleteTrabajo(trabajoMasterDTO.getId());
                trabajoMasterDtosList.remove(trabajoMasterDTO);
                for (ImagenDTO dto : trabajoMasterDTO.getCreateimagen()) {
                    imagenPersistance.deleteImagen(dto.getId());
                }
                trabajoPersistance.deleteTrabajo(trabajoMasterDTO.getId());
                trabajoMasterDtosList.remove(trabajoMasterDTO);
            }
        }

    }

    public void updateMasterTrabajo(TrabajoMasterDTO trabajo) {

        // update Obra
        if (trabajo.getUpdateobra() != null) {
            for (ObraDTO dto : trabajo.getUpdateobra()) {
                obraPersistance.updateObra(dto);
            }
        }
        // persist new Obra
        if (trabajo.getCreateobra() != null) {
            for (ObraDTO dto : trabajo.getCreateobra()) {
                ObraDTO persistedObraDTO = obraPersistance.createObra(dto);
                dto = persistedObraDTO;
            }
        }
        // delete Obra
        if (trabajo.getDeleteobra() != null) {
            for (ObraDTO dto : trabajo.getDeleteobra()) {

                obraPersistance.deleteObra(dto.getId());
            }
        }
        // update Autor
        if (trabajo.getUpdateautor() != null) {
            for (AutorDTO dto : trabajo.getUpdateautor()) {
                autorPersistance.updateAutor(dto);
            }
        }
        // persist new Autor
        if (trabajo.getCreateautor() != null) {
            for (AutorDTO dto : trabajo.getCreateautor()) {
                AutorDTO persistedAutorDTO = autorPersistance.createAutor(dto);
                dto = persistedAutorDTO;
            }
        }
        // delete Autor
        if (trabajo.getDeleteautor() != null) {
            for (AutorDTO dto : trabajo.getDeleteautor()) {

                autorPersistance.deleteAutor(dto.getId());
            }
        }
        // update Video
        if (trabajo.getUpdatevideo() != null) {
            for (VideoDTO dto : trabajo.getUpdatevideo()) {
                videoPersistance.updateVideo(dto);
            }
        }
        // persist new Video
        if (trabajo.getCreatevideo() != null) {
            for (VideoDTO dto : trabajo.getCreatevideo()) {
                VideoDTO persistedVideoDTO = videoPersistance.createVideo(dto);
                dto = persistedVideoDTO;
            }
        }
        // delete Video
        if (trabajo.getDeletevideo() != null) {
            for (VideoDTO dto : trabajo.getDeletevideo()) {

                videoPersistance.deleteVideo(dto.getId());
            }
        }
        // update Imagen
        if (trabajo.getUpdateimagen() != null) {
            for (ImagenDTO dto : trabajo.getUpdateimagen()) {
                imagenPersistance.updateImagen(dto);
            }
        }
        // persist new Imagen
        if (trabajo.getCreateimagen() != null) {
            for (ImagenDTO dto : trabajo.getCreateimagen()) {
                ImagenDTO persistedImagenDTO = imagenPersistance.createImagen(dto);
                dto = persistedImagenDTO;
            }
        }
        // delete Imagen
        if (trabajo.getDeleteimagen() != null) {
            for (ImagenDTO dto : trabajo.getDeleteimagen()) {

                imagenPersistance.deleteImagen(dto.getId());
            }
        }
    }
}