/* ========================================================================
 * Copyright 2014 EscherFinal
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 EscherFinal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence;
import co.edu.uniandes.csw.EscherFinal.obra.logic.dto.ObraDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence.entity.TrabajoobraEntity;
import co.edu.uniandes.csw.EscherFinal.obra.persistence.converter.ObraConverter;
import co.edu.uniandes.csw.EscherFinal.autor.logic.dto.AutorDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence.entity.TrabajoautorEntity;
import co.edu.uniandes.csw.EscherFinal.autor.persistence.converter.AutorConverter;
import co.edu.uniandes.csw.EscherFinal.video.logic.dto.VideoDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence.entity.TrabajovideoEntity;
import co.edu.uniandes.csw.EscherFinal.video.persistence.converter.VideoConverter;
import co.edu.uniandes.csw.EscherFinal.imagen.logic.dto.ImagenDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence.entity.TrabajoimagenEntity;
import co.edu.uniandes.csw.EscherFinal.imagen.persistence.converter.ImagenConverter;
import co.edu.uniandes.csw.EscherFinal.trabajo.logic.dto.TrabajoDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.logic.dto.TrabajoMasterDTO;
import co.edu.uniandes.csw.EscherFinal.trabajo.master.persistence.api._ITrabajoMasterPersistence;
import co.edu.uniandes.csw.EscherFinal.trabajo.persistence.api.ITrabajoPersistence;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

public class _TrabajoMasterPersistence implements _ITrabajoMasterPersistence {

  	@PersistenceContext(unitName="EscherFinalPU")
 
    protected EntityManager entityManager;
    
    @Inject
    protected ITrabajoPersistence trabajoPersistence;  

    public TrabajoMasterDTO getTrabajo(Long trabajoId) {
        TrabajoMasterDTO trabajoMasterDTO = new TrabajoMasterDTO();
        TrabajoDTO trabajo = trabajoPersistence.getTrabajo(trabajoId);
        trabajoMasterDTO.setTrabajoEntity(trabajo);
        trabajoMasterDTO.setListobra(getTrabajoobraEntityList(trabajoId));
        trabajoMasterDTO.setListautor(getTrabajoautorEntityList(trabajoId));
        trabajoMasterDTO.setListvideo(getTrabajovideoEntityList(trabajoId));
        trabajoMasterDTO.setListimagen(getTrabajoimagenEntityList(trabajoId));
        return trabajoMasterDTO;
    }

    public TrabajoobraEntity createTrabajoobraEntity(TrabajoobraEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteTrabajoobraEntity(Long trabajoId, Long obraId) {
        Query q = entityManager.createNamedQuery("TrabajoobraEntity.deleteTrabajoobraEntity");
        q.setParameter("trabajoId", trabajoId);
        q.setParameter("obraId", obraId);
        q.executeUpdate();
    }

    public List<ObraDTO> getTrabajoobraEntityList(Long trabajoId) {
        ArrayList<ObraDTO> resp = new ArrayList<ObraDTO>();
        Query q = entityManager.createNamedQuery("TrabajoobraEntity.getByMasterId");
        q.setParameter("trabajoId",trabajoId);
        List<TrabajoobraEntity> qResult =  q.getResultList();
        for (TrabajoobraEntity entity : qResult) { 
            if(entity.getObraIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(ObraConverter.entity2PersistenceDTO(entity.getObraIdEntity()));
        }
        return resp;
    }
    public TrabajoautorEntity createTrabajoautorEntity(TrabajoautorEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteTrabajoautorEntity(Long trabajoId, Long autorId) {
        Query q = entityManager.createNamedQuery("TrabajoautorEntity.deleteTrabajoautorEntity");
        q.setParameter("trabajoId", trabajoId);
        q.setParameter("autorId", autorId);
        q.executeUpdate();
    }

    public List<AutorDTO> getTrabajoautorEntityList(Long trabajoId) {
        ArrayList<AutorDTO> resp = new ArrayList<AutorDTO>();
        Query q = entityManager.createNamedQuery("TrabajoautorEntity.getByMasterId");
        q.setParameter("trabajoId",trabajoId);
        List<TrabajoautorEntity> qResult =  q.getResultList();
        for (TrabajoautorEntity entity : qResult) { 
            if(entity.getAutorIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(AutorConverter.entity2PersistenceDTO(entity.getAutorIdEntity()));
        }
        return resp;
    }
    public TrabajovideoEntity createTrabajovideoEntity(TrabajovideoEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteTrabajovideoEntity(Long trabajoId, Long videoId) {
        Query q = entityManager.createNamedQuery("TrabajovideoEntity.deleteTrabajovideoEntity");
        q.setParameter("trabajoId", trabajoId);
        q.setParameter("videoId", videoId);
        q.executeUpdate();
    }

    public List<VideoDTO> getTrabajovideoEntityList(Long trabajoId) {
        ArrayList<VideoDTO> resp = new ArrayList<VideoDTO>();
        Query q = entityManager.createNamedQuery("TrabajovideoEntity.getByMasterId");
        q.setParameter("trabajoId",trabajoId);
        List<TrabajovideoEntity> qResult =  q.getResultList();
        for (TrabajovideoEntity entity : qResult) { 
            if(entity.getVideoIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(VideoConverter.entity2PersistenceDTO(entity.getVideoIdEntity()));
        }
        return resp;
    }
    public TrabajoimagenEntity createTrabajoimagenEntity(TrabajoimagenEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteTrabajoimagenEntity(Long trabajoId, Long imagenId) {
        Query q = entityManager.createNamedQuery("TrabajoimagenEntity.deleteTrabajoimagenEntity");
        q.setParameter("trabajoId", trabajoId);
        q.setParameter("imagenId", imagenId);
        q.executeUpdate();
    }

    public List<ImagenDTO> getTrabajoimagenEntityList(Long trabajoId) {
        ArrayList<ImagenDTO> resp = new ArrayList<ImagenDTO>();
        Query q = entityManager.createNamedQuery("TrabajoimagenEntity.getByMasterId");
        q.setParameter("trabajoId",trabajoId);
        List<TrabajoimagenEntity> qResult =  q.getResultList();
        for (TrabajoimagenEntity entity : qResult) { 
            if(entity.getImagenIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(ImagenConverter.entity2PersistenceDTO(entity.getImagenIdEntity()));
        }
        return resp;
    }

}
